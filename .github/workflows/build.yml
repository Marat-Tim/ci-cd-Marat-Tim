name: Сборка

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - '*'

jobs:
  build_and_push:
    runs-on: ubuntu-latest

    outputs:
      image_name: ${{ steps.prepare_env.outputs.image_name }}
      image_tag: ${{ steps.prepare_env.outputs.image_tag }}

    steps:
      - name: Подготовка окружения
        id: prepare_env
        run: |
          if [ -n "${{ github.head_ref }}" ]; then
            branch=${{ github.head_ref }}
          else
            branch=${{ github.ref_name }}
          fi
          
          sha=$(echo "${{ github.sha }}" | cut -c 1-7 | tr '[:upper:]' '[:lower:]')
          
          image_name=$(echo "${{ secrets.docker_username }}/${{ github.event.repository.name }}" | tr '[:upper:]' '[:lower:]')
          echo "image_name=$image_name" >> "$GITHUB_ENV"
          
          image_tag=$(echo "$branch-$sha" | tr '[:upper:]' '[:lower:]')
          echo "image_tag=$image_tag" >> "$GITHUB_ENV"
          
          echo "image_name=$image_name" >> "$GITHUB_OUTPUT"
          echo "image_tag=$image_tag" >> "$GITHUB_OUTPUT"
      - name: Checkout репозитория
        uses: actions/checkout@v2
      - name: Установка JDK
        uses: actions/setup-java@v2
        with:
          java-version: '17'
          distribution: adopt
      - name: Сборка программы
        run: mvn install
      - name: Сборка docker образа
        run: docker build -t "$image_name:$image_tag" .
      - name: Авторизация в Docker Hub
        run: docker login -u ${{ secrets.docker_username }} -p ${{ secrets.docker_password }}
      - name: Push образа в Docker Hub
        run: |
          echo "$image_name:$image_tag"
          docker push "$image_name:$image_tag"
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            docker tag "$image_name:$image_tag" "$image_name:latest"
            docker push "$image_name:latest"
          fi

  autotest:
    needs: build_and_push # имя вашей основной джобы сборки
    uses: central-university-dev/hse-ab-cicd-hw/.github/workflows/autotests.yml@main
    with:
      chart-path: ./helm # путь к чарту из второй дз
      image-name: marattim/ci-cd-marat-tim # имя образа вашего приложения
      image-tag: ${{ needs.build_and_push.outputs.image_tag }} # таг образа, который собран в рамках данного ПРа
